# Generated by Django 5.0.6 on 2024-05-30 11:58

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessTripReason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Причины командировок',
            },
        ),
        migrations.CreateModel(
            name='ClientCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название организации')),
                ('inn', models.CharField(max_length=255, verbose_name='ИНН организации')),
            ],
        ),
        migrations.CreateModel(
            name='DocsType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255, verbose_name='Тип документа')),
            ],
        ),
        migrations.CreateModel(
            name='ProductParams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название позиции')),
                ('price', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='ProductType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Тип позиции')),
            ],
        ),
        migrations.CreateModel(
            name='TelegramInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(verbose_name='TelegramID (не путать с логином)')),
                ('telegram_login', models.CharField(max_length=255, verbose_name='Telegram логин')),
            ],
            options={
                'verbose_name_plural': 'Данные Telegram',
            },
        ),
        migrations.CreateModel(
            name='WorkerDepartament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Отдел')),
            ],
            options={
                'verbose_name_plural': 'Отделы',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='WorkerPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название должности')),
            ],
            options={
                'verbose_name_plural': 'Должности',
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='BusinessTrip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=64, verbose_name='Город')),
                ('reason', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.businesstripreason', verbose_name='Причина поездки')),
            ],
            options={
                'verbose_name_plural': 'Командировки',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Ф.И.О. клиента')),
                ('entity', models.BooleanField(verbose_name='Представляет юр. лицо?')),
                ('phone_number', models.CharField(max_length=20)),
                ('additional_phone_number', models.CharField(max_length=20)),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Почта клиента')),
                ('company_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.clientcompany')),
                ('telegram_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.telegraminfo')),
            ],
        ),
        migrations.CreateModel(
            name='Docs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(blank=True, max_length=255)),
                ('file', models.FileField(upload_to='')),
                ('file_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.docstype')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.client', verbose_name='Клиент')),
                ('docs', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.docs', verbose_name='Документ')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
                ('order_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.order')),
                ('product_params', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.productparams')),
            ],
        ),
        migrations.AddField(
            model_name='productparams',
            name='product_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.producttype', verbose_name='Тип позиции'),
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Ф.И.О')),
                ('phone_number', models.CharField(max_length=20)),
                ('additional_phone_number', models.CharField(max_length=20)),
                ('birthday', models.DateField(verbose_name='День рождения')),
                ('mail', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Почта сотрудника')),
                ('telegram_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.telegraminfo')),
                ('departament', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.workerdepartament', verbose_name='Отдел')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='app.workerpost', verbose_name='Должность')),
            ],
            options={
                'verbose_name_plural': 'Сотрудники',
                'ordering': ('name',),
            },
        ),
        migrations.AddField(
            model_name='order',
            name='worker',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='app.worker', verbose_name='Клиент'),
        ),
    ]
